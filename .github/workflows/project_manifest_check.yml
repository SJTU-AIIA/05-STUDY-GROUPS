name: Manifest Check
on:
  push:
    paths:
      - '*/studyspace/**'
      - '!.template/studyspace/**'
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_ADMIN }}
          fetch-depth: 2
          ref: ${{ github.event.pull_request.merged && 'main' || github.ref }}

      - name: Fetch Commit Author
        id: commit-author
        run: |
          AUTHOR="${GITHUB_ACTOR}"
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
      
      - name: Determine Affected Projects
        id: affected-projects
        run: |
          # Get all changed files under both paths
          changed_files=$(git diff --name-only $GITHUB_SHA^ $GITHUB_SHA -- '*/studyspace/*')
          
          declare -a projects
          while IFS= read -r file; do
            studygroup=$(echo "$file" | cut -d'/' -f1)
            project_dir=$(echo "$file" | cut -d'/' -f3)
            manifest_path="$studygroup/studyspace/$project_dir/manifest.json"
            
            if [[ -f "$manifest_path" ]]; then
              projects+=("$manifest_path")
            fi
          done <<< "$changed_files"

          # Format output (store full paths)
          unique_projects=($(printf "%s\n" "${projects[@]}" | sort -u))
          echo "Found ${#unique_projects[@]} projects to validate:"
          printf '%s\n' "${unique_projects[@]}"
          
          # Set outputs as JSON array
          if [ ${#unique_projects[@]} -eq 0 ]; then
            echo "::notice::No project manifests need validation"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          else
            echo "projects=${unique_projects[*]}" >> $GITHUB_OUTPUT
            echo "projects_json=$(jq -nc '$ARGS.positional' --args "${unique_projects[@]}")" >> $GITHUB_OUTPUT
          fi

      - name: Validate Manifests
        if: steps.affected-projects.outputs.projects
        run: |
          for manifest in ${{ steps.affected-projects.outputs.projects }}; do
            project_dir=$(dirname "$manifest")
            echo "::group::Validating $project_dir"
            python .github/plugins/validate_manifest.py \
              "$manifest" \
              "${{ github.actor }}"
            git add "$manifest"
            echo "::endgroup::"
          done
          
      - name: Determine Affected Study Groups
        id: affected-study-groups
        run: |
          # Get all changed files
          changed_files=$(git diff --name-only $GITHUB_SHA^ $GITHUB_SHA -- '*')
          
          # Extract unique study group directories that have a groupinfo.json
          declare -a study_groups
          while IFS= read -r file; do
            # Extract the project directory from the changed file
            study_group_dir=$(echo "$file" | cut -d'/' -f1)
            if [[ -f "$study_group_dir/groupinfo.json" ]]; then
              study_groups+=("$study_group_dir")
            fi
          done <<< "$changed_files"
          # Remove duplicates and format as JSON array
          unique_study_groups=($(printf "%s\n" "${study_groups[@]}" | sort -u))
          echo "Found ${#unique_study_groups[@]} study groups to validate: ${unique_study_groups[*]}"
          
          # Set outputs
          if [ ${#unique_study_groups[@]} -eq 0 ]; then
            echo "::notice::No study group manifests need validation"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          else
            echo "study_groups=${unique_study_groups[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Validate Group Info
        if: steps.affected-study-groups.outputs.study_groups
        run: |
          for studygroup in ${{ steps.affected-study-groups.outputs.study_groups }}; do
            echo "::group::Validating $studygroup"
            python .github/plugins/validate_groupinfo.py \
              "$studygroup/groupinfo.json" \
              "${{ github.actor }}"
            git add "$studygroup/groupinfo.json"
            echo "::endgroup::"
          done

      - name: Update Registry and Markdown
        if: steps.affected-study-groups.outputs.study_groups
        run: |
          python .github/plugins/update_studyspace_registry.py
          python .github/plugins/generate_studyspace_registry_md.py
          git config --global user.name "GitHub Bot"
          git config --global user.email "actions@github.com"
          for studygroup in ${{ steps.affected-study-groups.outputs.study_groups }}; do
            git add "$studygroup/_registry.json"
            git add "$studygroup/REGISTRY.md"
          done
          git commit -m "[CLI] Update registry for ${{ steps.affected-study-groups.outputs.study_groups }}"
          git push
    
      - name: Skip notice
        if: env.SKIP_VALIDATION == 'true'
        run: echo "::notice::Skipping validation - no project manifests were modified"

  validate-push-privileges:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check If Admin
        id: check-admin
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data: members } = await github.rest.teams.listMembersInOrg({
                org: context.repo.owner,
                team_slug: 'admins',
              });
              const isAdmin = members.some(member => member.login === context.actor);
              core.setOutput('is-admin', isAdmin);
            } catch (error) {
              core.setFailed(`Admin check failed: ${error.message}`);
              core.setOutput('is-admin', false);
            }
          github-token: ${{ secrets.PAT_ADMIN }}

      - name: Set Admin Bypass
        id: bypass
        run: |
          if [ "${{ steps.check-admin.outputs.is-admin }}" == "true" ]; then
            echo "Admin user detected - bypassing validation"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          else
            echo "Proceeding with validation"
          fi

      - name: Validate Push
        if: env.SKIP_VALIDATION != 'true'
        run: |
          python .github/plugins/validate_push.py "${{ github.actor }}"