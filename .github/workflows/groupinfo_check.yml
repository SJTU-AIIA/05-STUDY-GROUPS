name: Manifest Check
on:
  push:
    paths:
      - '**' 
      - '!.github/**'
      - '!.template/**'
      - '!**/studyspace/**'
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
            token: ${{ secrets.PAT_ADMIN }}
            fetch-depth: 2
            ref: ${{ github.event.pull_request.merged && 'main' || github.ref }}
  
      - name: Check if Merged
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          if [ "${{ github.event.pull_request.merged }}" != "true" ]; then
            echo "PR closed without merging - exiting"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          fi

      - name: Fetch Commit Author
        id: commit-author
        run: |
          AUTHOR="${GITHUB_ACTOR}"  # Directly use the actor for a push event
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
      
      - name: Determine Affected Study Groups
        id: affected-project
        run: |
          # Get all changed files
          changed_files=$(git diff --name-only $GITHUB_SHA^ $GITHUB_SHA -- '*')
          
          # Extract unique study group directories that have a groupinfo.json
          declare -a study_groups
          while IFS= read -r file; do
            # Extract the project directory from the changed file
            study_group_dir=$(echo "$file" | cut -d'/' -f1)
            if [[ -f "$study_group_dir/groupinfo.json" ]]; then
              study_groups+=("$study_group_dir")
            fi
          done <<< "$changed_files"
          # Remove duplicates and format as JSON array
          unique_study_groups=($(printf "%s\n" "${study_groups[@]}" | sort -u))
          echo "Found ${#unique_study_groups[@]} study groups to validate: ${unique_study_groups[*]}"
          
          # Set outputs
          if [ ${#unique_study_groups[@]} -eq 0 ]; then
            echo "::notice::No study group manifests need validation"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          else
            echo "study_groups=${unique_study_groups[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Validate Group Info
        if: steps.affected-project.outputs.study_groups
        run: |
          for studygroup in ${{ steps.affected-project.outputs.study_groups }}; do
            echo "::group::Validating $studygroup"
            python .github/plugins/validate_groupinfo.py \
              "$studygroup/groupinfo.json" \
              "${{ github.actor }}"
            git add "$studygroup/groupinfo.json"
            echo "::endgroup::"
          done

      - name: Update Registry and Markdown
        if: steps.affected-project.outputs.study_groups
        run: |
          python .github/plugins/update_studygroups_registry.py
          python .github/plugins/generate_registry_md.py
          git config --global user.name "GitHub Bot"
          git config --global user.email "actions@github.com"
          git add _registry.json
          git add REGISTRY.md
          git commit -m "[CLI] Update registry for ${{ steps.affected-project.outputs.study_groups }}"  # update registry only if actual files are affected
          git push
    
      - name: Skip notice
        if: env.SKIP_VALIDATION == 'true'
        run: echo "::notice::Skipping validation - no project manifests were modified"